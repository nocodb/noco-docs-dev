"use strict";(self.webpackChunknoco_docs=self.webpackChunknoco_docs||[]).push([[4251],{15485:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"developer-resources/rest-APIs/upload-via-api","title":"Upload via API","description":"Upload files locally present or from public remote URL via API","source":"@site/docs/160.developer-resources/010.rest-APIs/050.upload-via-api.md","sourceDirName":"160.developer-resources/010.rest-APIs","slug":"/developer-resources/rest-APIs/upload-via-api","permalink":"/developer-resources/rest-APIs/upload-via-api","draft":false,"unlisted":false,"editUrl":"https://github.com/nocodb/nocodb/tree/develop/packages/noco-docs/docs/160.developer-resources/010.rest-APIs/050.upload-via-api.md","tags":[],"version":"current","sidebarPosition":50,"frontMatter":{"title":"Upload via API","description":"Upload files locally present or from public remote URL via API","hide_table_of_contents":true},"sidebar":"tutorialSidebar","previous":{"title":"Accessing APIs","permalink":"/developer-resources/rest-APIs/accessing-apis"},"next":{"title":"Webhook","permalink":"/category/webhook-1"}}');var o=n(74848),r=n(28453);const s={title:"Upload via API",description:"Upload files locally present or from public remote URL via API",hide_table_of_contents:!0},i="Upload local file",l={},c=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Sample code to upload files via API is listed below.\nAssumes ",(0,o.jsx)(t.code,{children:"http://localhost:8080/"})," as the base URL for the API calls."]}),"\n",(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"upload-local-file",children:"Upload local file"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"let axios = require(\"axios\").default;\nlet FormData = require('form-data');\nlet fs = require('fs');\n\n// Configurations\n//\nconst project_id = '<Project Identifier>';\nconst table_id = '<Table Identifier>';\nconst xc_token = '<Auth Token>';\nconst file_path = '<Local File Path>';\n\n\n// Insert Image\n// @param image_path : local file path\n// @return : JSON object to be used in insert record API for attachment field\n//\nasync function insertImage (path) {\n    const formData = new FormData();\n    formData.append(\"file\", fs.createReadStream(path));\n    const data = await axios({\n        url: 'http://localhost:8080/api/v2/storage/upload',\n        data: formData,\n        headers:{\n            'Content-Type':`multipart/form-data;`,\n            'xc-token': xc_token\n        },\n        method: 'post',\n\n        // Optional : storage file path\n        params: {\"path\": \"somePath\"}\n    });\n    return data;\n}\n\n// Insert record with attachment\n// Assumes a table with two columns :\n//      'Title' of type SingleLineText and\n//      'Attachment' of type Attachment\n//\nasync function uploadFileExample() {\n    let response = await insertImage(file_path);\n\n    let row = {\n        \"Title\": \"2\",\n        \"Attachment\": response.data\n    };\n\n    await axios({\n        method: 'POST',\n        url: `http://localhost:8080/api/v2/tables/${table_id}/records`,\n        data: row,\n        headers: {\n            'xc-token': xc_token\n        }\n    });\n}\n\n(async () => {\n    await uploadFileExample();\n})();\n"})}),"\n",(0,o.jsx)(t.h1,{id:"upload-via-url",children:"Upload via URL"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"let axios = require(\"axios\").default;\nlet FormData = require('form-data');\nlet fs = require('fs');\n\n// Configurations\n//\nconst project_id = '<Project Identifier>';\nconst table_id = '<Table Identifier>';\nconst xc_token = '<Auth Token>';\n\n// URL array : URLs of files to be uploaded\nconst URLs = [{ url: '<URL1>' }, { url: '<URL2>' }];\n\n// Insert Image\n// @param URLs : [] containing public URL for files to be uploaded\n// @return : JSON object to be used in insert record API for attachment field\n//\nasync function insertImageByURL (URL_array) {\n    const data = await axios({\n        url: 'http://localhost:8080/api/v2/storage/upload-by-url',\n        data: URL_array,\n        headers: {\n            'xc-token': xc_token\n        },\n        method: 'post',\n\n        // Optional : storage file path\n        params: {\"path\": \"somePath\"}\n    });\n    return data;\n}\n\n// Insert record with attachment\n// Assumes a table with two columns :\n//      'Title' of type SingleLineText and\n//      'Attachment' of type Attachment\n//\nasync function uploadByUrlExample() {\n    let response = await insertImageByURL(URLs);\n\n    // Update two columns : Title and Attachment\n    let row = {\n        \"Title\": \"3\",\n        \"Attachment\": response.data\n    };\n\n    await axios({\n        method: 'POST',\n        url: `http://localhost:8080/api/v2/tables/${table_id}/records`,\n        data: row,\n        headers: {\n            'xc-token': xc-token\n        }\n    });\n}\n\n(async () => {\n    await uploadByUrlExample();\n})();\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(96540);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);