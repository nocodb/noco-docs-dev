"use strict";(self.webpackChunknoco_docs=self.webpackChunknoco_docs||[]).push([[6675],{28453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>d});var a=l(96540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},93001:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"fields/field-types/formula/numeric-functions","title":"Numeric functions","description":"This article explains various numeric functions that can be used in formula fields.","source":"@site/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md","sourceDirName":"070.fields/040.field-types/060.formula","slug":"/fields/field-types/formula/numeric-functions","permalink":"/fields/field-types/formula/numeric-functions","draft":false,"unlisted":false,"editUrl":"https://github.com/nocodb/nocodb/tree/develop/packages/noco-docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md","tags":[{"inline":true,"label":"Fields","permalink":"/tags/fields"},{"inline":true,"label":"Field types","permalink":"/tags/field-types"},{"inline":true,"label":"Formula","permalink":"/tags/formula"}],"version":"current","sidebarPosition":20,"frontMatter":{"title":"Numeric functions","description":"This article explains various numeric functions that can be used in formula fields.","tags":["Fields","Field types","Formula"],"keywords":["Fields","Field types","Formula","Create formula field","Numeric functions"]},"sidebar":"tutorialSidebar","previous":{"title":"Numeric and Logical Operators","permalink":"/fields/field-types/formula/operators"},"next":{"title":"String functions","permalink":"/fields/field-types/formula/string-functions"}}');var i=l(74848),s=l(28453);const r={title:"Numeric functions",description:"This article explains various numeric functions that can be used in formula fields.",tags:["Fields","Field types","Formula"],keywords:["Fields","Field types","Formula","Create formula field","Numeric functions"]},d=void 0,t={},c=[{value:"ABS",id:"abs",level:2},{value:"Syntax",id:"syntax",level:4},{value:"Sample",id:"sample",level:4},{value:"ADD",id:"add",level:2},{value:"Syntax",id:"syntax-1",level:4},{value:"Sample",id:"sample-1",level:4},{value:"AVG",id:"avg",level:2},{value:"Syntax",id:"syntax-2",level:4},{value:"Sample",id:"sample-2",level:4},{value:"CEILING",id:"ceiling",level:2},{value:"Syntax",id:"syntax-3",level:4},{value:"Sample",id:"sample-3",level:4},{value:"COUNT",id:"count",level:2},{value:"Syntax",id:"syntax-4",level:4},{value:"Sample",id:"sample-4",level:4},{value:"COUNTA",id:"counta",level:2},{value:"Syntax",id:"syntax-5",level:4},{value:"Sample",id:"sample-5",level:4},{value:"COUNTALL",id:"countall",level:2},{value:"Syntax",id:"syntax-6",level:4},{value:"Sample",id:"sample-6",level:4},{value:"EVEN",id:"even",level:2},{value:"Syntax",id:"syntax-7",level:4},{value:"Sample",id:"sample-7",level:4},{value:"EXP",id:"exp",level:2},{value:"Syntax",id:"syntax-8",level:4},{value:"Sample",id:"sample-8",level:4},{value:"FLOOR",id:"floor",level:2},{value:"Syntax",id:"syntax-9",level:4},{value:"Sample",id:"sample-9",level:4},{value:"INT",id:"int",level:2},{value:"Syntax",id:"syntax-10",level:4},{value:"Sample",id:"sample-10",level:4},{value:"LOG",id:"log",level:2},{value:"Syntax",id:"syntax-11",level:4},{value:"Sample",id:"sample-11",level:4},{value:"MAX",id:"max",level:2},{value:"Syntax",id:"syntax-12",level:4},{value:"Sample",id:"sample-12",level:4},{value:"MIN",id:"min",level:2},{value:"Syntax",id:"syntax-13",level:4},{value:"Sample",id:"sample-13",level:4},{value:"MOD",id:"mod",level:2},{value:"Syntax",id:"syntax-14",level:4},{value:"Sample",id:"sample-14",level:4},{value:"ODD",id:"odd",level:2},{value:"Syntax",id:"syntax-15",level:4},{value:"Sample",id:"sample-15",level:4},{value:"POWER",id:"power",level:2},{value:"Syntax",id:"syntax-16",level:4},{value:"Sample",id:"sample-16",level:4},{value:"ROUND",id:"round",level:2},{value:"Syntax",id:"syntax-17",level:4},{value:"Sample",id:"sample-17",level:4},{value:"ROUNDDOWN",id:"rounddown",level:2},{value:"Syntax",id:"syntax-18",level:4},{value:"Sample",id:"sample-18",level:4},{value:"ROUNDUP",id:"roundup",level:2},{value:"Syntax",id:"syntax-19",level:4},{value:"Sample",id:"sample-19",level:4},{value:"SQRT",id:"sqrt",level:2},{value:"Syntax",id:"syntax-20",level:4},{value:"Sample",id:"sample-20",level:4},{value:"VALUE",id:"value",level:2},{value:"Syntax",id:"syntax-21",level:4},{value:"Sample",id:"sample-21",level:4},{value:"Related Articles",id:"related-articles",level:2}];function x(e){const n={a:"a",code:"code",h2:"h2",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This cheat sheet provides a quick reference guide for various mathematical functions commonly used in data analysis and programming. Each function is accompanied by its syntax, a sample usage, and a brief description."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"abs",children:"ABS"}),"\n",(0,i.jsx)(n.p,{children:"The ABS function returns the distance of the number from zero on the number line, ensuring that the result is non-negative."}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ABS(number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ABS(10.35) => 10.35\nABS(-15) => 15\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"add",children:"ADD"}),"\n",(0,i.jsx)(n.p,{children:"The ADD function computes the total of multiple numbers provided as arguments."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ADD(number1, [number2, ...])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-1",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ADD(5, 7) => 12\nADD(-10, 15, 20) => 25\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"avg",children:"AVG"}),"\n",(0,i.jsx)(n.p,{children:"The AVG function calculates the mean of a set of numerical values."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"AVG(number1, [number2, ...])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-2",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"AVG(10, 20, 30) => 20\nAVG(-5, 5) => 0\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"ceiling",children:"CEILING"}),"\n",(0,i.jsx)(n.p,{children:"The CEILING function rounds a number up to the nearest integer greater than or equal to the input."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"CEILING(number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-3",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"CEILING(8.75) => 9\nCEILING(-15.25) => -15\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"count",children:"COUNT"}),"\n",(0,i.jsx)(n.p,{children:"The COUNT function calculates the number of numeric arguments provided."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"COUNT(number1, [number2, ...])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-4",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:'COUNT(1, 2, "abc", 3) => 3\nCOUNT(-5, 0, "$abc", 5) => 3\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"counta",children:"COUNTA"}),"\n",(0,i.jsx)(n.p,{children:"The COUNTA function counts the number of non-empty arguments provided."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"COUNTA(value1, [value2, ...])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-5",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:'COUNTA(1, "", "text") => 2\nCOUNTA("one", "two", "three") => 3\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"countall",children:"COUNTALL"}),"\n",(0,i.jsx)(n.p,{children:"The COUNTALL function calculates the total number of arguments, both numeric and non-numeric."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"COUNTALL(value1, [value2, ...])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-6",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:'COUNTALL(1, "", "text") => 3\nCOUNTALL("one", "two", "three") => 3\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"even",children:"EVEN"}),"\n",(0,i.jsx)(n.p,{children:"The EVEN function rounds positive values up to the nearest even number and negative values down to the nearest even number."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"EVEN(number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-7",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"EVEN(7) => 8\nEVEN(-5) => -6\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"exp",children:"EXP"}),"\n",(0,i.jsx)(n.p,{children:"The EXP function returns 'e' raised to the power of a given number."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"EXP(number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-8",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"EXP(2) => 7.38905609893065\nEXP(-1) => 0.36787944117144233\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"floor",children:"FLOOR"}),"\n",(0,i.jsx)(n.p,{children:"The FLOOR function rounds a number down to the nearest integer."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"FLOOR(number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-9",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"FLOOR(8.75) => 8\nFLOOR(-15.25) => -16\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"int",children:"INT"}),"\n",(0,i.jsx)(n.p,{children:"The INT function truncates the decimal part, returning the integer portion of a number."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"INT(number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-10",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"INT(8.75) => 8\nINT(-15.25) => -15\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"log",children:"LOG"}),"\n",(0,i.jsx)(n.p,{children:"The LOG function computes the logarithm of a number to a specified base. (default = e)."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"LOG([base], number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-11",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"LOG(10, 100) => 2\nLOG(2, 8) => 3\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"max",children:"MAX"}),"\n",(0,i.jsx)(n.p,{children:"The MAX function identifies the highest value from a set of numbers."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"MAX(number1, [number2, ...])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-12",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"MAX(5, 10, 3) => 10\nMAX(-10, -5, -20) => -5\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"min",children:"MIN"}),"\n",(0,i.jsx)(n.p,{children:"The MIN function identifies the lowest value from a set of numbers."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"MIN(number1, [number2, ...])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-13",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"MIN(5, 10, 3) => 3\nMIN(-10, -5, -20) => -20\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"mod",children:"MOD"}),"\n",(0,i.jsx)(n.p,{children:"The MOD function calculates the remainder when dividing (integer division) one number by another."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"MOD(number1, number2)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-14",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"MOD(10, 3) => 1\nMOD(-15, 4) => -3\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"odd",children:"ODD"}),"\n",(0,i.jsx)(n.p,{children:"The ODD function rounds positive values up to the nearest odd number and negative values down to the nearest odd number."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-15",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ODD(number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-15",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ODD(6) => 7\nODD(-5.5) => -7\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"power",children:"POWER"}),"\n",(0,i.jsx)(n.p,{children:"The POWER function raises a given base to a specified exponent."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-16",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"POWER(base, exponent)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-16",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"POWER(2, 3) => 8\nPOWER(10, -2) => 0.01\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"round",children:"ROUND"}),"\n",(0,i.jsx)(n.p,{children:"The ROUND function is used to round a number to a specified number of decimal places (precision). Default value for precision is 0."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-17",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ROUND(number, [precision])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-17",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ROUND(8.765, 2) => 8.77\nROUND(-15.123, 1) => -15.1\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"rounddown",children:"ROUNDDOWN"}),"\n",(0,i.jsx)(n.p,{children:"The ROUNDDOWN function rounds a number down to a specified number of decimal places (precision). Default value for precision is 0."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-18",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ROUNDDOWN(number, [precision])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-18",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ROUNDDOWN(8.765, 2) => 8.76\nROUNDDOWN(-15.123, 1) => -15.2\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"roundup",children:"ROUNDUP"}),"\n",(0,i.jsx)(n.p,{children:"The ROUNDUP function rounds a number up to a specified number of decimal places (precision). Default value for precision is 0."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-19",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ROUNDUP(number, [precision])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-19",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"ROUNDUP(8.765, 2) => 8.77\nROUNDUP(-15.123, 1) => -15.1\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"sqrt",children:"SQRT"}),"\n",(0,i.jsx)(n.p,{children:"The SQRT function calculates the square root of a given number."}),"\n",(0,i.jsx)(n.h4,{id:"syntax-20",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"SQRT(number)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-20",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"SQRT(25) => 5\nSQRT(2) => 1.4142135623730951\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"value",children:"VALUE"}),"\n",(0,i.jsxs)(n.p,{children:["The VALUE function is used to extract the numeric value from a string (after handling ",(0,i.jsx)(n.code,{children:"%"})," or ",(0,i.jsx)(n.code,{children:"-"})," accordingly)."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-21",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"VALUE(text)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sample-21",children:"Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:'VALUE("123$") => 123\nVALUE("USD -45.67") => -45.67\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"related-articles",children:"Related Articles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/fields/field-types/formula/operators",children:"Numeric and Logical Operators"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/fields/field-types/formula/string-functions",children:"String Functions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/fields/field-types/formula/date-functions",children:"Date Functions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/fields/field-types/formula/conditional-expressions",children:"Conditional Expressions"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}}}]);