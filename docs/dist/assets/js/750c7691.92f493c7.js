"use strict";(self.webpackChunknoco_docs=self.webpackChunknoco_docs||[]).push([[3905],{24522:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"getting-started/self-hosted/installation/aws-ecs","title":"AWS ECS (Fargate)","description":"AWS ECS (Fargate) Installation","source":"@site/docs/020.getting-started/050.self-hosted/010.installation/070.aws-ecs.md","sourceDirName":"020.getting-started/050.self-hosted/010.installation","slug":"/getting-started/self-hosted/installation/aws-ecs","permalink":"/getting-started/self-hosted/installation/aws-ecs","draft":false,"unlisted":false,"editUrl":"https://github.com/nocodb/nocodb/tree/develop/packages/noco-docs/docs/020.getting-started/050.self-hosted/010.installation/070.aws-ecs.md","tags":[{"inline":true,"label":"Open Source","permalink":"/tags/open-source"}],"version":"current","sidebarPosition":70,"frontMatter":{"title":"AWS ECS (Fargate)","description":"AWS ECS (Fargate) Installation","tags":["Open Source"],"keywords":["NocoDB installation","NocoDB AWS Fargate installation","NocoDB prerequisites"]},"sidebar":"tutorialSidebar","previous":{"title":"Homebrew","permalink":"/getting-started/self-hosted/installation/home-brew"},"next":{"title":"GCP Cloud Run","permalink":"/getting-started/self-hosted/installation/gcp-cloud-run"}}');var o=t(74848),i=t(28453);const r={title:"AWS ECS (Fargate)",description:"AWS ECS (Fargate) Installation",tags:["Open Source"],keywords:["NocoDB installation","NocoDB AWS Fargate installation","NocoDB prerequisites"]},a="Deploying NocoDB on AWS ECS (Fargate)",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Deployment Steps",id:"deployment-steps",level:2},{value:"Important Notes",id:"important-notes",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"deploying-nocodb-on-aws-ecs-fargate",children:"Deploying NocoDB on AWS ECS (Fargate)"})}),"\n",(0,o.jsx)(n.p,{children:"This guide will walk you through deploying NocoDB on Amazon ECS using Fargate."}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"AWS CLI configured with appropriate permissions"}),"\n",(0,o.jsx)(n.li,{children:"Basic understanding of AWS ECS and Fargate"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"deployment-steps",children:"Deployment Steps"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Create ECS Cluster"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"  aws ecs create-cluster --cluster-name <YOUR_ECS_CLUSTER>\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Create a Log Group:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"aws logs create-log-group --log-group-name /ecs/<YOUR_APP_NAME>/<YOUR_CONTAINER_NAME>\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Create an ECS Task Definition:"}),"\n",(0,o.jsx)(n.p,{children:"Every time you create it, it will add a new version. If it is not existing, the version will be 1."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"aws ecs register-task-definition --cli-input-json file://task-definition.json\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"This json file defines the container specification. You can define secrets such as NC_DB and environment variables here."})}),"\n",(0,o.jsxs)(n.p,{children:["Example ",(0,o.jsx)(n.code,{children:"task-definition.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'    {\n        "family": "nocodb-sample-task-def",\n        "networkMode": "awsvpc",\n        "containerDefinitions": [\n        {\n            "name": "<YOUR_CONTAINER_NAME>",\n            "image": "nocodb/nocodb:latest",\n            "essential": true,\n            "logConfiguration": {\n            "logDriver": "awslogs",\n            "options": {\n                "awslogs-group": "/ecs/<YOUR_APP_NAME>/<YOUR_CONTAINER_NAME>",\n                "awslogs-region": "<YOUR_AWS_REGION>",\n                "awslogs-stream-prefix": "ecs"\n            }\n        },\n         "secrets": [\n        {\n            "name": "<YOUR_SECRETS_NAME>",\n            "valueFrom": "<YOUR_SECRET_ARN>"\n        }\n        ],\n        "environment": [\n            {\n                "name": "<YOUR_ENV_VARIABLE_NAME>",\n                "value": "<YOUR_ENV_VARIABLE_VALUE>"\n            }\n        ],\n        "portMappings": [\n            {\n                "containerPort": 8080,\n                "hostPort": 8080,\n                "protocol": "tcp"\n            }\n        ]\n    }\n],\n"requiresCompatibilities": [\n    "FARGATE"\n],\n"cpu": "256",\n"memory": "512",\n"executionRoleArn": "<YOUR_ECS_EXECUTION_ROLE_ARN>",\n"taskRoleArn": "<YOUR_ECS_TASK_ROLE_ARN>"\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Create an ECS Service:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'aws ecs create-service \\\n    --cluster <YOUR_ECS_CLUSTER> \\\n    --service-name  <YOUR_SERVICE_NAME> \\\n    --task-definition <YOUR_TASK_DEF>:<YOUR_TASK_DEF_VERSION> \\\n    --desired-count <DESIRED_COUNT> \\\n    --launch-type "FARGATE" \\\n    --platform-version <VERSION> \\\n    --health-check-grace-period-seconds <GRACE_PERIOD_IN_SECOND> \\\n    --network-configuration "awsvpcConfiguration={subnets=["<YOUR_SUBSETS>"], securityGroups=["<YOUR_SECURITY_GROUPS>"], assignPublicIp=ENABLED}" \\\n    --load-balancer targetGroupArn=<TARGET_GROUP_ARN>,containerName=<CONTAINER_NAME>,containerPort=<YOUR_CONTAINER_PORT>\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"If your service fails to start, you may check the logs in ECS console or in Cloudwatch. Generally it fails due to the connection between ECS container and NC_DB. Make sure the security groups have the correct inbound and outbound rules."})}),"\n",(0,o.jsx)(n.h3,{id:"important-notes",children:"Important Notes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Ensure that your security groups have the correct inbound and outbound rules."}),"\n",(0,o.jsx)(n.li,{children:"The NC_DB environment variable should be properly set to connect to your database."}),"\n",(0,o.jsx)(n.li,{children:"Monitor the ECS console and CloudWatch logs for any deployment issues."}),"\n",(0,o.jsx)(n.li,{children:"You can customize the task definition and service configuration based on your requirements."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);