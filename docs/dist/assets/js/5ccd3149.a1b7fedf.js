"use strict";(self.webpackChunknoco_docs=self.webpackChunknoco_docs||[]).push([[8019],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var s=n(96540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}},34281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"engineering/playwright","title":"Playwright E2E Testing","description":"Overview to playwright based e2e tests","source":"@site/versioned_docs/version-0.109.7/050.engineering/050.playwright.md","sourceDirName":"050.engineering","slug":"/engineering/playwright","permalink":"/0.109.7/engineering/playwright","draft":false,"unlisted":false,"editUrl":"https://github.com/nocodb/nocodb/tree/develop/packages/noco-docs/versioned_docs/version-0.109.7/050.engineering/050.playwright.md","tags":[],"version":"0.109.7","sidebarPosition":50,"frontMatter":{"title":"Playwright E2E Testing","description":"Overview to playwright based e2e tests"},"sidebar":"tutorialSidebar","previous":{"title":"Writing Unit Tests","permalink":"/0.109.7/engineering/unit-testing"},"next":{"title":"Releases & Builds","permalink":"/0.109.7/engineering/builds-and-releases"}}');var i=n(74848),r=n(28453);const l={title:"Playwright E2E Testing",description:"Overview to playwright based e2e tests"},a=void 0,o={},c=[{value:"How to run tests",id:"how-to-run-tests",level:2},{value:"Run Test Server",id:"run-test-server",level:3},{value:"Running all tests",id:"running-all-tests",level:3},{value:"Running individual tests",id:"running-individual-tests",level:3},{value:"Concepts",id:"concepts",level:2},{value:"Independent tests",id:"independent-tests",level:3},{value:"What to test",id:"what-to-test",level:3},{value:"Playwright",id:"playwright",level:3},{value:"Page Objects",id:"page-objects",level:2},{value:"Writing a test",id:"writing-a-test",level:2},{value:"Create a test suite",id:"create-a-test-suite",level:3},{value:"Create a page object",id:"create-a-page-object",level:3},{value:"Writing an action method",id:"writing-an-action-method",level:3},{value:"Writing an assertion/verification method",id:"writing-an-assertionverification-method",level:3},{value:"Tips to avoid flakiness",id:"tips-to-avoid-flakiness",level:2},{value:"Accessing playwright report in the CI",id:"accessing-playwright-report-in-the-ci",level:2}];function d(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"how-to-run-tests",children:"How to run tests"}),"\n",(0,i.jsxs)(t.p,{children:["All the tests reside in ",(0,i.jsx)(t.code,{children:"tests/playwright"})," folder."]}),"\n",(0,i.jsx)(t.p,{children:"Make sure to install the dependencies(in the playwright folder):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm install\nnpx playwright install chromium --with-deps\n"})}),"\n",(0,i.jsx)(t.h3,{id:"run-test-server",children:"Run Test Server"}),"\n",(0,i.jsxs)(t.p,{children:["Start the backend test server (in ",(0,i.jsx)(t.code,{children:"packages/nocodb"})," folder):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run watch:run:playwright\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Start the frontend test server (in ",(0,i.jsx)(t.code,{children:"packages/nc-gui"})," folder):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"NUXT_PAGE_TRANSITION_DISABLE=true npm run dev\n"})}),"\n",(0,i.jsx)(t.h3,{id:"running-all-tests",children:"Running all tests"}),"\n",(0,i.jsxs)(t.p,{children:["For selecting db type, rename ",(0,i.jsx)(t.code,{children:".env.example"})," to ",(0,i.jsx)(t.code,{children:".env"})," and set ",(0,i.jsx)(t.code,{children:"E2E_DEV_DB_TYPE"})," to  ",(0,i.jsx)(t.code,{children:"sqlite"}),"(default), ",(0,i.jsx)(t.code,{children:"mysql"})," or ",(0,i.jsx)(t.code,{children:"pg"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"headless mode(without opening browser):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test\n"})}),"\n",(0,i.jsx)(t.p,{children:"with browser:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test:debug\n"})}),"\n",(0,i.jsx)(t.p,{children:"For setting up mysql(sakila):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"docker-compose -f ./tests/playwright/scripts/docker-compose-mysql-playwright.yml  up -d\n"})}),"\n",(0,i.jsx)(t.p,{children:"For setting up postgres(sakila):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"docker-compose -f ./tests/playwright/scripts/docker-compose-playwright-pg.yml \n"})}),"\n",(0,i.jsx)(t.h3,{id:"running-individual-tests",children:"Running individual tests"}),"\n",(0,i.jsxs)(t.p,{children:["Add ",(0,i.jsx)(t.code,{children:".only"})," to the test you want to run:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"test.only('should login', async ({ page }) => {\n  // ...\n})\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test\n"})}),"\n",(0,i.jsx)(t.h2,{id:"concepts",children:"Concepts"}),"\n",(0,i.jsx)(t.h3,{id:"independent-tests",children:"Independent tests"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"All tests are independent of each other."}),"\n",(0,i.jsx)(t.li,{children:"Each test starts with a fresh project with a fresh sakila database(option to not use sakila db is also there)."}),"\n",(0,i.jsxs)(t.li,{children:["Each test creates a new user(email as ",(0,i.jsx)(t.code,{children:"user@nocodb.com"}),") and logs in with that user to the dashboard."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Caveats:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Some stuffs are shared i.e, users, plugins etc. So be catious while writing tests touching that. A fix for this is in the works."}),"\n",(0,i.jsx)(t.li,{children:"In test, we prefix email and project with the test id, which will be deleted after the test is done."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"what-to-test",children:"What to test"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"UI verification. This includes verifying the state of the UI element, i.e if the element is visible, if the element has a particular text etc."}),"\n",(0,i.jsx)(t.li,{children:"Test should verify all user flow. A test has a default timeout of 60 seconds. If a test is taking more than 60 seconds, it is a sign that the test should be broken down into smaller tests."}),"\n",(0,i.jsx)(t.li,{children:"Test should also verify all the side effects the feature(i.e. On adding a new column type, should verify column deletion as well) will have, and also error cases."}),"\n",(0,i.jsx)(t.li,{children:"Test name should be descriptive. It should be easy to understand what the test is doing by just reading the test name."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"playwright",children:"Playwright"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Playwright is a nodejs library for automating chromium, firefox and webkit."}),"\n",(0,i.jsx)(t.li,{children:"For each test, a new browser context is created. This means that each test runs in a new incognito window."}),"\n",(0,i.jsxs)(t.li,{children:["For assertion always use ",(0,i.jsx)(t.code,{children:"expect"})," from ",(0,i.jsx)(t.code,{children:"@playwright/test"})," library. This library provides a lot of useful assertions, which also has retry logic built in."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"page-objects",children:"Page Objects"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Page objects are used to abstract over the components/page. This makes the tests more readable and maintainable."}),"\n",(0,i.jsxs)(t.li,{children:["All page objects are in ",(0,i.jsx)(t.code,{children:"tests/playwright/pages"})," folder."]}),"\n",(0,i.jsx)(t.li,{children:"All the test related code should be in page objects."}),"\n",(0,i.jsx)(t.li,{children:"Methods should be as thin as possible and its better to have multiple methods than one big method, which improves reusability."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The methods of a page object can be classified into 2 categories:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Actions: Performs an UI actions like click, type, select etc. Is also responsible for waiting for the element to be ready and the action to be performed. This included waiting for API calls to complete."}),"\n",(0,i.jsxs)(t.li,{children:["Assertions: Asserts the state of the UI element, i.e if the element is visible, if the element has a particular text etc. Use ",(0,i.jsx)(t.code,{children:"expect"})," from ",(0,i.jsx)(t.code,{children:"@playwright/test"})," and if not use ",(0,i.jsx)(t.code,{children:"expect.poll"})," to wait for the assertion to pass."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"writing-a-test",children:"Writing a test"}),"\n",(0,i.jsx)(t.p,{children:"Let's write a test for testing filter functionality."}),"\n",(0,i.jsxs)(t.p,{children:["For simplicity, we will have ",(0,i.jsx)(t.code,{children:"DashboardPage"})," implemented, which will have all the methods related to dashboard page and also its child components like Grid, etc."]}),"\n",(0,i.jsx)(t.h3,{id:"create-a-test-suite",children:"Create a test suite"}),"\n",(0,i.jsxs)(t.p,{children:["Create a new file ",(0,i.jsx)(t.code,{children:"filter.spec.ts"})," in ",(0,i.jsx)(t.code,{children:"tests/playwright/tests"})," folder and use ",(0,i.jsx)(t.code,{children:"setup"})," method to create a new project and user."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"import { test, expect } from '@playwright/test';\nimport setup, { NcContext } from '../setup';\n\ntest.describe('Filter', () => {\n  let context: NcContext;\n\n  test.beforeEach(async ({ page }) => {\n    context = await setup({ page });\n  })\n\n  test('should filter', async ({ page }) => {\n    // ...\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"create-a-page-object",children:"Create a page object"}),"\n",(0,i.jsxs)(t.p,{children:["Since filter is UI wise scoped to a ",(0,i.jsx)(t.code,{children:"Toolbar"})," , we will add filter page object to ",(0,i.jsx)(t.code,{children:"ToolbarPage"})," page object."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"export class ToolbarPage extends BasePage {\n  readonly parent: GridPage | GalleryPage | FormPage | KanbanPage;\n  readonly filter: ToolbarFilterPage;\n\n  constructor(parent: GridPage | GalleryPage | FormPage | KanbanPage) {\n    super(parent.rootPage);\n    this.parent = parent;\n    this.filter = new ToolbarFilterPage(this);\n  }\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["We will create ",(0,i.jsx)(t.code,{children:"ToolbarFilterPage"})," page object, which will have all the methods related to filter."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"export class ToolbarFilterPage extends BasePage {\n  readonly toolbar: ToolbarPage;\n\n  constructor(toolbar: ToolbarPage) {\n    super(toolbar.rootPage);\n    this.toolbar = toolbar;\n  }\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Here ",(0,i.jsx)(t.code,{children:"BasePage"})," is an abstract class, which used to enforce structure for all page objects. Thus all page object ",(0,i.jsx)(t.em,{children:"should"})," inherit ",(0,i.jsx)(t.code,{children:"BasePage"}),"."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Helper methods like ",(0,i.jsx)(t.code,{children:"waitForResponse"})," and ",(0,i.jsx)(t.code,{children:"getClipboardText"})," (this can be access on any page object, with ",(0,i.jsx)(t.code,{children:"this.waitForResponse"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Provides structure for page objects, enforces all Page objects to have ",(0,i.jsx)(t.code,{children:"rootPage"})," property, which is the page object created in the test setup."]}),"\n",(0,i.jsxs)(t.li,{children:["Enforces all pages to have a ",(0,i.jsx)(t.code,{children:"get"})," method which will return the locator of the main container of that page, hence we can have focused dom selection, i.e."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// This will only select the button inside the container of the concerned page\nawait this.get().querySelector('button').count();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"writing-an-action-method",children:"Writing an action method"}),"\n",(0,i.jsxs)(t.p,{children:["This a method which will reset/clear all the filters. Since this is an action method, it will also wait for the ",(0,i.jsx)(t.code,{children:"delete"})," filter API to return. Ignoring this API call will cause flakiness in the test, down the line."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"async resetFilter() {\n  await this.waitForResponse({\n    uiAction: () => this.get().locator('.nc-filter-item-remove-btn').click(),\n    httpMethodsToMatch: ['DELETE'],\n    requestUrlPathToMatch: '/api/v1/db/meta/filters/',\n  });\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"writing-an-assertionverification-method",children:"Writing an assertion/verification method"}),"\n",(0,i.jsxs)(t.p,{children:["Here we use ",(0,i.jsx)(t.code,{children:"expect"})," from ",(0,i.jsx)(t.code,{children:"@playwright/test"})," library, which has retry logic built in."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"import { expect } from '@playwright/test';\n\nasync verifyFilter({ title }: { title: string }) {\n  await expect(\n    this.get().locator(`[data-testid=\"nc-fields-menu-${title}\"]`).locator('input[type=\"checkbox\"]')\n  ).toBeChecked();\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"tips-to-avoid-flakiness",children:"Tips to avoid flakiness"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If an UI action, causes an API call or the UI state change, then wait for that API call to complete or the UI state to change."}),"\n",(0,i.jsx)(t.li,{children:"What to wait out can be situation specific, but in general, is best to wait for the final state to be reached, i.e. in the case of creating filter, while it seems like waiting for the filter API to complete is enough, but after its return the table rows are reloaded and the UI state changes, so its better to wait for the table rows to be reloaded."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"accessing-playwright-report-in-the-ci",children:"Accessing playwright report in the CI"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Open ",(0,i.jsx)(t.code,{children:"Summary"})," tab in the CI workflow in github actions."]}),"\n",(0,i.jsxs)(t.li,{children:["Scroll down to ",(0,i.jsx)(t.code,{children:"Artifacts"})," section."]}),"\n",(0,i.jsxs)(t.li,{children:["Access reports which suffixed with the db type and shard number(corresponding to the CI workerflow name). i.e ",(0,i.jsx)(t.code,{children:"playwright-report-mysql-2"})," is for ",(0,i.jsx)(t.code,{children:"playwright-mysql-2"})," workflow."]}),"\n",(0,i.jsxs)(t.li,{children:["Download it and run ",(0,i.jsx)(t.code,{children:"npm install -D @playwright/test && npx playwright show-report ./"})," inside the downloaded folder."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);